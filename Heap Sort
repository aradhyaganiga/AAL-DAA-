#include <stdio.h>

// Function to heapify a subtree rooted at index i
void heapify(int a[], int n, int i) {
    int largest = i;       // Initialize largest as root
    int left = 2 * i + 1; 
    int right = 2 * i + 2;
    int temp;

    // If left child is larger than root
    if (left < n && a[left] > a[largest])
        largest = left;

    // If right child is larger than largest so far
    if (right < n && a[right] > a[largest])
        largest = right;

    // If largest is not root
    if (largest != i) {
        temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;

        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    int i, temp;

    // Build max heap
    for (i = n / 2 - 1; i >= 0; i--)
        heapify(a, n, i);

    // Extract elements from heap one by one
    for (i = n - 1; i >= 0; i--) {
        // Move current root to end
        temp = a[0];
        a[0] = a[i];
        a[i] = temp;

        heapify(a, i, 0);
    }
}

int main() {
    int a[30], n, i;

    // Input number of elements
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Input array elements
    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &a[i]);

    // Call heap sort
    heapSort(a, n);

    // Output the sorted array
    printf("Sorted array in ascending order:\n");
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    return 0;
}

Output:-
Enter the number of elements: 6
Enter 6 elements:
12 11 13 5 6 7
Sorted array in ascending order:
5 6 7 11 12 13
